@page "/brands"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SustainabilityWebApp.Models
@using SustainabilityWebApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<SustainabilityWebApp.Data.SustainabilityWebAppContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
</div>

<p>
    <a href="brands/create">Create New</a>
</p>

<div>
    <QuickGrid Class="table" Items="FilteredBrands" Pagination="pagination">
        <PropertyColumn Property="brand => brand.Name" Sortable="true" />
        <PropertyColumn Property="brand => brand.FoundedDate" Title="Founded Date" />
        <PropertyColumn Property="brand => brand.Score" />
        <PropertyColumn Property="brand => brand.AveragePrice" Title="Average Price" />
        <PropertyColumn Property="brand => brand.Rating" />

        <TemplateColumn Context="brand">
            <a href="@($"brands/edit?id={brand.Id}")">Edit</a> |
            <a href="@($"brands/details?id={brand.Id}")">Details</a> |
            <a href="@($"brands/delete?id={brand.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="pagination" />


@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    private SustainabilityWebAppContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    //[SupplyParameterFromQuery]
    // private string? NameFilter { get; set; }

    //private IQueryable<Brand> FilteredBrands =>
    // context.Brand.Where(m => m.Name!.Contains(NameFilter ?? string.Empty));

    private string titleFilter = string.Empty;

    private IQueryable<Brand> FilteredBrands =>
        context.Brand.Where(m => m.Name!.Contains(titleFilter));
}
