@page "/search"
@rendermode InteractiveServer
@inject IDbContextFactory<SustainabilityWebAppContext> DbFactory
@using Microsoft.EntityFrameworkCore
@using SustainabilityWebApp.Data
@using SustainabilityWebApp.Models
@implements IAsyncDisposable

<PageTitle>Brand Search</PageTitle>

<div class="page-container">
    <h1>Search for a Brand</h1>
</div>



<style>
    .search-wrapper {
        display: flex;
        justify-content: center;
        margin-top: 4rem;
    }

    .search-input {
        width: 100%;
        max-width: 600px;
        font-size: 1.5rem;
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        border: 1px solid #ccc;
        box-shadow: none;
        transition: border-color 0.2s ease-in-out;
    }

    .search-input:focus {
        border-color: #1b6ec2;
        outline: none;
        box-shadow: 0 0 8px rgba(27, 110, 194, 0.5);
    }

    .results-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 2rem;
        gap: 1.5rem;
        padding: 0 1rem;
    }

    .brand-card {
        
        display: flex;
        align-items: center;
        width: 100%;
        max-width: 650px;
        background-color: #ffffff;
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        text-decoration: none;
        color: inherit;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        padding: 1rem 1.25rem;
    }

    .brand-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        background: linear-gradient(135deg, #e0f0ff 0%, #ffffff 100%);
    }

    .brand-logo {
        height: 60px;
        width: 60px;
        object-fit: contain;
        border-radius: 8px;
        margin-right: 1.25rem;
        background-color: #f2f2f2;
        padding: 0.25rem;
    }

    .brand-name {
        font-size: 1.5rem;
        font-weight: 600;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
</style>



<div class="d-flex justify-content-center mb-5">
    <input class="form-control form-control-lg w-50"
           placeholder="Type a brand name..."
           value="@searchTerm"
           @oninput="OnInputChanged" />
</div>

@if (!string.IsNullOrWhiteSpace(searchTerm))
{
    if (isSearching)
    {
        <p class="text-center"><em>Searching...</em></p>
    }
    else if (filteredBrands.Count == 0)
    {
        <p class="text-center">No results found..</p>
    }
    else
    {
        <ul class="list-group w-50 mx-auto">
            @foreach (var brand in filteredBrands)
            {
                <li class="list-group-item d-flex align-items-center">
                    @if (!string.IsNullOrWhiteSpace(brand.LogoUrl))
                    {
                        <img src="@brand.LogoUrl" alt="@brand.Name Logo" style="height: 40px; width: auto; margin-right: 1rem;" />
                    }
                    <NavLink href="@($"/brand/{brand.Id}")">@brand.Name</NavLink>
                </li>
            }
        </ul>
    }
}

@code {
    private SustainabilityWebAppContext context = default!;
    private string searchTerm = string.Empty;
    private List<Brand> filteredBrands = new();

    private CancellationTokenSource? debounceCts;
    private readonly int debounceDelay = 1000;
    private bool isSearching = false;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();

        isSearching = true;
        StateHasChanged();

        try
        {
            await Task.Delay(debounceDelay, debounceCts.Token);

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var results = await context.Brand
                    .Where(b => b.Name.Contains(searchTerm))
                    .OrderBy(b => b.Name)
                    .ToListAsync();

                filteredBrands = results;
            }
            else
            {
                filteredBrands.Clear();
            }
        }
        catch (TaskCanceledException)
        {
            // debounce cancelled, no action needed
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
