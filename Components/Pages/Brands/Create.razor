@page "/brands/create"
@using Microsoft.EntityFrameworkCore
@using SustainabilityWebApp.Models
@inject IDbContextFactory<SustainabilityWebApp.Data.SustainabilityWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Brand</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Brand" OnValidSubmit="AddBrand" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Brand.Name" class="form-control" />
                <ValidationMessage For="() => Brand.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="foundeddate" class="form-label">CountryOfOrigin</label>
                <InputText id="foundeddate" @bind-Value="Brand.CountryOfOrigin" class="form-control" />
                <ValidationMessage For="() => Brand.CountryOfOrigin" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="score" class="form-label">PlanetSustainabilityRate:</label>
                <InputNumber id="score" @bind-Value="Brand.PlanetSustainabilityRate" class="form-control" />
                <ValidationMessage For="() => Brand.PlanetSustainabilityRate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="score" class="form-label">PeopleRate:</label>
                <InputNumber id="score" @bind-Value="Brand.PeopleRate" class="form-control" />
                <ValidationMessage For="() => Brand.PeopleRate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="score" class="form-label">AnimalCrueltyRate:</label>
                <InputNumber id="score" @bind-Value="Brand.AnimalCrueltyRate" class="form-control" />
                <ValidationMessage For="() => Brand.AnimalCrueltyRate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="averageprice" class="form-label">PricingRate:</label>
                <InputSelect id="averageprice" @bind-Value="Brand.PricingRate" class="form-control">
                    <option value="">-- Select price tier --</option>
                    <option value="1">$</option>
                    <option value="2">$$</option>
                    <option value="3">$$$</option>
                    <option value="4">$$$$</option>
                </InputSelect>
                <ValidationMessage For="() => Brand.PricingRate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">SmileyFace:</label>
                <InputText id="name" @bind-Value="Brand.SmileyFace" class="form-control" />
                <ValidationMessage For="() => Brand.SmileyFace" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label>
                <InputSelect id="rating" @bind-Value="Brand.Rated" class="form-control">
                    <option value="">-- Select a rating --</option>
                    <option value="We avoid">Terrible</option>
                    <option value="Not good enough">Bad</option>
                    <option value="Getting There">Getting There</option>
                    <option value="Good">Good</option>
                    <option value="Great">Amazing</option>
                </InputSelect>
                <ValidationMessage For="() => Brand.Rated" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/brands">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Brand Brand { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBrand()
    {
        using var context = DbFactory.CreateDbContext();
        context.Brand.Add(Brand);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/brands");
    }
}