@page "/brands/delete"
@using Microsoft.EntityFrameworkCore
@using SustainabilityWebApp.Models
@inject IDbContextFactory<SustainabilityWebApp.Data.SustainabilityWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Brand</h2>
    <hr />
    @if (brand is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@brand.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FoundedDate</dt>
            <dd class="col-sm-10">@brand.PlanetSustainabilityRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Score</dt>
            <dd class="col-sm-10">@brand.PeopleRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AveragePrice</dt>
            <dd class="col-sm-10">@brand.AnimalCrueltyRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@brand.CountryOfOrigin</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@brand.PricingRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@brand.SmileyFace</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@brand.Rated</dd>
        </dl>
        <EditForm method="post" Model="brand" OnValidSubmit="DeleteBrand" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(brand is null)">Delete</button> |
            <a href="/brands">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Brand? brand;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        brand = await context.Brand.FirstOrDefaultAsync(m => m.Id == Id);

        if (brand is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBrand()
    {
        using var context = DbFactory.CreateDbContext();
        context.Brand.Remove(brand!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/brands");
    }
}