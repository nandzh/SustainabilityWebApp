@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SustainabilityWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<style>
    body {
        background-color: #f9f9f9;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        margin: 0;
        padding: 0;
        color: #111;
    }

    .auth-container {
        max-width: 360px;
        margin: 5vh auto;
        padding: 2rem;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.06);
    }

    .auth-title {
        font-size: 1.8rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 2rem;
    }

    form {
        display: flex;
        flex-direction: column;
    }

    input[type="text"],
    input[type="password"],
    input[type="email"] {
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 1rem;
        background-color: #fefefe;
        transition: border-color 0.3s;
    }

    input:focus {
        outline: none;
        border-color: #007aff;
    }

    button {
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        background-color: #007aff;
        color: white;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #005fcc;
    }

    .auth-footer {
        margin-top: 1.5rem;
        text-align: center;
        font-size: 0.95rem;
    }

    a {
        color: #007aff;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }
</style>

<div class="auth-container">
    <div class="auth-title">Sign In</div>

    <StatusMessage Message="@errorMessage" />

    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <InputText @bind-Value="Input.Email" id="Input.Email" type="email" placeholder="Email" autocomplete="username" aria-required="true" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />

        <InputText @bind-Value="Input.Password" id="Input.Password" type="password" placeholder="Password" autocomplete="current-password" aria-required="true" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />

        <div style="margin-bottom: 1rem;">
            <label style="font-size: 0.9rem;">
                <InputCheckbox @bind-Value="Input.RememberMe" style="margin-right: 0.5rem;" />
                Remember me
            </label>
        </div>

        <button type="submit">Log In</button>

        <div class="auth-footer">
            <p><a href="/Account/ForgotPassword">Forgot your password?</a></p>
            <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
            <p><a href="/Account/ResendEmailConfirmation">Resend email confirmation</a></p>
        </div>
    </EditForm>

    <div style="margin-top: 2rem; text-align: center;">
        <h3 style="font-size: 1.2rem; font-weight: 500;">Use another service to log in</h3>
        <ExternalLoginPicker />
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
