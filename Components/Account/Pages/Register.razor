@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SustainabilityWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<style>
    body {
        background-color: #f9f9f9;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        margin: 0;
        padding: 0;
        color: #111;
    }

    .auth-container {
        max-width: 360px;
        margin: 5vh auto;
        padding: 2rem;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.06);
    }

    .auth-title {
        font-size: 1.8rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 2rem;
    }

    form {
        display: flex;
        flex-direction: column;
    }

    input[type="text"],
    input[type="password"],
    input[type="email"] {
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 1rem;
        background-color: #fefefe;
        transition: border-color 0.3s;
    }

    input:focus {
        outline: none;
        border-color: #007aff;
    }

    button {
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        background-color: #007aff;
        color: white;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #005fcc;
    }

    .auth-footer {
        margin-top: 1.5rem;
        text-align: center;
        font-size: 0.95rem;
    }

    a {
        color: #007aff;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .external-login-section {
        text-align: center;
        margin-top: 2rem;
    }

    .external-login-section h3 {
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }
</style>

<div class="auth-container">
    <div class="auth-title">Create Account</div>

    <StatusMessage Message="@Message" />

    <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <InputText @bind-Value="Input.Email" id="Input.Email" type="email" placeholder="Email" autocomplete="username" aria-required="true" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />

        <InputText @bind-Value="Input.Password" id="Input.Password" type="password" placeholder="Password" autocomplete="new-password" aria-required="true" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />

        <InputText @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" type="password" placeholder="Confirm password" autocomplete="new-password" aria-required="true" />
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />

        <button type="submit">Register</button>
    </EditForm>

    <div class="external-login-section">
        <h3>Use another service to register</h3>
        <ExternalLoginPicker />
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
