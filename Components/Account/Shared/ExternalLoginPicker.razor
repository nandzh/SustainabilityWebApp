@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SustainabilityWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
<form method="post" action="Account/PerformExternalLogin">
    <AntiforgeryToken />
    <input type="hidden" name="provider" value="Microsoft" />
    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />

    <button type="submit" class="ms-login-btn" title="Sign in with Microsoft">
        <img src="https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg" alt="Microsoft logo" class="ms-logo" />
        Sign in with Microsoft
    </button>
</form>

<style>
    .ms-login-btn {
        all: unset;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background-color: white;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 500;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        cursor: pointer;
        transition: box-shadow 0.2s ease, transform 0.1s ease;
    }

    .ms-login-btn:hover {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        transform: translateY(-1px);
    }

    .ms-logo {
        width: 18px;
        height: 18px;
        display: inline-block;
    }

    /* Center the form if needed */
    form {
        display: flex;
        justify-content: center;
        margin-top: 1rem;
    }
</style>
@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this
            <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article</a>
            about setting up this ASP.NET application to support logging in via external services.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
